// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  image         String?
  created       DateTime?     @default(now())
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  reservations  Reservation[]
  ownedKitchens Kitchen[]
}

model Reservation {
  start     DateTime
  end       DateTime
  userId    String
  kitchenId String
  user      User     @relation(fields: [userId], references: [id])
  kitchen   Kitchen  @relation(fields: [kitchenId], references: [id])
  approved  Boolean

  @@id([userId, kitchenId])
}

model Kitchen {
  id         String   @id @default(cuid())
  desc       String
  appliances String[]
  location   String
  photo      String
  owner      User     @relation(fields: [userId], references: [id])
  start      DateTime
  end        DateTime

  lat Float @default(0)
  lng Float @default(0)

  fanumTax Boolean @default(false)

  type         KitchenType
  cost         Float
  review       Review[]
  reservations Reservation[]
  userId       String
}

model Review {
  rating    Int
  comment   String
  user      User    @relation(fields: [userId], references: [id])
  kitchen   Kitchen @relation(fields: [kitchenId], references: [id])
  userId    String
  kitchenId String

  @@id([userId, kitchenId])
}

enum KitchenType {
  PUBLIC
  PRIVATE
}
